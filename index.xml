<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CC&#39;s Notebook</title>
    <link>https://comezc.com/</link>
    <description>Recent content on CC&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2018 - 2019, Comezc; all rights reserved. </copyright>
    <lastBuildDate>Tue, 27 Aug 2019 19:50:19 +0800</lastBuildDate>
    
	<atom:link href="https://comezc.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Laravel Service Provider设置延迟加载后注册失败</title>
      <link>https://comezc.com/post/laravel-service-provider%E8%AE%BE%E7%BD%AE%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%90%8E%E6%B3%A8%E5%86%8C%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Tue, 27 Aug 2019 19:50:19 +0800</pubDate>
      
      <guid>https://comezc.com/post/laravel-service-provider%E8%AE%BE%E7%BD%AE%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%90%8E%E6%B3%A8%E5%86%8C%E5%A4%B1%E8%B4%A5/</guid>
      <description>问题 在参考网上示例，尝试创建service provider的时候，第一次尝试成功运行；然后修改其 $defer 属性为true再注释掉后，service provider始终无法加载成功。
定位&amp;amp;解决过程  验证新建的service provider本身是否有问题
\App\Providers\AppServiceProvider 是系统默认会加载的，可以在其 register 函数中，链式加载新建的service provider
public function register() { $this-&amp;gt;app-&amp;gt;register(ExampleServiceProvider::class); }  试验后，发现程序正常运行，所以基本确认是注册在 config/app.php 中的 ExampleServiceProvider 没有生效。
 研究service provider加载的源码
通过 Illuminate\Foundation\Application 源码找到 registerConfiguredProviders 方法：
(new ProviderRepository($this, new Filesystem, $this-&amp;gt;getCachedServicesPath())) -&amp;gt;load($providers-&amp;gt;collapse()-&amp;gt;toArray());  Laravel是通过这个方法读取 config/app.php 中的 providers 内容并加载到 ProviderRepository 中。
根据 $this-&amp;gt;getCachedServicesPath() 可以看出，这里是有缓存的。
Laravel会根据 bootstrap/cache/services.php 缓存文件的内容去加载service provider。
 程序员生涯两座大山：缓存 &amp;amp; 命名
  解决方法 更改defer属性后，需要执行 php artisan clear-compiled 和 php artisan optimize 来更新service provider的缓存。</description>
    </item>
    
    <item>
      <title>Mysql 5.7 多实例 - 多配置文件</title>
      <link>https://comezc.com/post/mysql5.7-%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%9A%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Thu, 11 Jul 2019 16:50:19 +0800</pubDate>
      
      <guid>https://comezc.com/post/mysql5.7-%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%9A%E5%AE%9E%E4%BE%8B/</guid>
      <description>Mysql 5.7 多实例 - 多配置文件  Mysql5.7 默认支持mysqld multi方式来实现单机多实例，但是由于我这里Mysql已经由lnmp脚本默认创建了3306实例，并且投入使用，不想影响现有的服务，想通过添加配置文件，单独启动新实例的方式实现单机多实例
使用lnmp脚本搭建环境，默认mysql位于 /usr/local/mysql 目录下，默认数据目录为/usr/local/mysql/var ，默认配置文件为 /etc/my.cnf
  创建新实例的数据目录（datadir）
# comezc @ localhost in ~ $ cd /usr/local/mysql/ # comezc @ localhost in /usr/local/mysql $ sudo mkdir var3308 # comezc @ localhost in /usr/local/mysql $ sudo chown -R mysql. var3308  初始化数据目录
# comezc @ localhost in /usr/local/mysql $ sudo /usr/local/mysql/bin/mysqld --no-defaults \ --initialize-insecure \ --basedir=/usr/local/mysql \ --datadir=/usr/local/mysql/var3308 \ --user=mysql \ --explicit_defaults_for_timestamp 2019-07-10T07:39:47.</description>
    </item>
    
    <item>
      <title>Mysql5.7.22 主从配置</title>
      <link>https://comezc.com/post/mysql5.7-%E4%B8%BB%E4%BB%8E/</link>
      <pubDate>Thu, 11 Jul 2019 15:50:19 +0800</pubDate>
      
      <guid>https://comezc.com/post/mysql5.7-%E4%B8%BB%E4%BB%8E/</guid>
      <description>Mysql5.7.22 主从配置  使用lnmp脚本搭建环境，默认mysql位于 /usr/local/mysql 目录下，默认配置文件为 /etc/my.cnf
 Master配置  开启binlog，即my.cnf配置的[mysqld]部分下面有如下配置：
log-bin=mysql-bin binlog_format=mixed server-id = 1 expire_logs_days = 10  此处为lnmp脚本默认执行时开启的binlog，具体binlog开启还有更多配置，包括类型，缓存，过滤等。因不想重启master mysql服务器，此处不做修改
 为slave服务器新建用户并授权（可指定slave服务器ip，增强安全性）：
``` grant replication slave on *.* to &#39;slave&#39;@&#39;1.1.1.1&#39; identified by &#39;*******&#39;; flush privileges; ```  查看master服务器的状态，查看结果后面配置slave服务器需用到
show master status;  查询结果参考如下：
mysql&amp;gt; show master status; +------------------+-----------+--------------+------------------+-------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | +------------------+-----------+--------------+------------------+-------------------+ | mysql-bin.000005 | 455142607 | | | | +------------------+-----------+--------------+------------------+-------------------+ 1 row in set (0.</description>
    </item>
    
    <item>
      <title>Sql scripts</title>
      <link>https://comezc.com/post/sql/</link>
      <pubDate>Fri, 05 Jul 2019 10:50:19 +0800</pubDate>
      
      <guid>https://comezc.com/post/sql/</guid>
      <description> Sql scripts 按年/季/月/周/日/时统计  整体格式
SELECT DATE_FORMAT(FROM_UNIXTIME(created_at),&#39;{FORMAT}&#39;) format, COUNT(*) cc FROM `user` GROUP BY format  {FORMAT}分类：
 年：%Y
 季：
DATE_FORMAT(FROM_UNIXTIME(created_at),&#39;{FORMAT}&#39;) =&amp;gt; CONCAT(DATE_FORMAT(FROM_UNIXTIME(created_at),&#39;%Y&#39;),FLOOR((DATE_FORMAT(FROM_UNIXTIME(created_at),&#39;%m&#39;)+2)/3))  月：%Y%m
 周：%Y%u
 日：%Y%m%d
 时：%Y-%m-%d %H
   创建用户并授权 create user &#39;reader&#39;@&#39;%&#39; identified by &#39;***&#39;; grant all on db_test.* to &#39;reader&#39;@&#39;%&#39;; flush privileges;  创建utf8mb4字符集数据库 create database xxx default character set utf8mb4 collate utf8mb4_unicode_ci;  </description>
    </item>
    
    <item>
      <title>Shopify Scripts</title>
      <link>https://comezc.com/post/shopify-scripts/</link>
      <pubDate>Mon, 01 Jul 2019 16:50:19 +0800</pubDate>
      
      <guid>https://comezc.com/post/shopify-scripts/</guid>
      <description>Shopify Scripts  买指定商品，享受所有配件八折，其中，部分配件仅允许享受一次八折优惠
SPECIFIC_VID = 28785311875136 UNLIMIT_DISCOUNT_PIDS = [3742304010304, 3733881094208] LIMIT_ONCE_DISCOUNT_PIDS = [3742295982144] def partition(cart, line_items) # Sort the items by price from high to low sorted_items = line_items.sort_by{|line_item| line_item.variant.price}.reverse # Create an array of items to return discount_items = [] sorted_items.each do |line_item| if LIMIT_ONCE_DISCOUNT_PIDS.include?(line_item.variant.product.id) &amp;amp;&amp;amp; line_item.quantity &amp;gt; 1 discount_item = line_item.split(take: 1) cart.line_items &amp;lt;&amp;lt; discount_item discount_items.push(discount_item) else discount_items.push(line_item) end end discount_items end Input.cart.line_items.each do |line_item| next unless line_item.</description>
    </item>
    
  </channel>
</rss>